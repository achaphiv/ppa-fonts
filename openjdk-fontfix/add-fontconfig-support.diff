Index: jdk8u-tuxjdk/jdk/make/lib/Awt2dLibraries.gmk
===================================================================
--- jdk8u-tuxjdk.orig/jdk/make/lib/Awt2dLibraries.gmk
+++ jdk8u-tuxjdk/jdk/make/lib/Awt2dLibraries.gmk
@@ -827,7 +827,7 @@ $(eval $(call SetupNativeCompilation,BUI
     LDFLAGS := $(subst -Xlinker -z -Xlinker defs,,$(LDFLAGS_JDKLIB)) $(LDFLAGS_CXX_JDK) \
         $(call SET_SHARED_LIBRARY_ORIGIN), \
     LDFLAGS_SUFFIX := $(BUILD_LIBFONTMANAGER_FONTLIB), \
-    LDFLAGS_SUFFIX_linux := -lawt $(LIBM) $(LIBCXX) -ljava -ljvm -lc, \
+    LDFLAGS_SUFFIX_linux := -lawt $(LIBM) $(LIBCXX) -ljava -ljvm -lc -lfontconfig, \
     LDFLAGS_SUFFIX_solaris := -lawt -lawt_xawt -lc $(LIBM) $(LIBCXX) -ljava -ljvm, \
     LDFLAGS_SUFFIX_aix := -lawt -lawt_xawt $(LIBM) $(LIBCXX) -ljava -ljvm,\
     LDFLAGS_SUFFIX_macosx := -lawt $(LIBM) $(LIBCXX) -undefined dynamic_lookup \
Index: jdk8u-tuxjdk/jdk/src/share/native/sun/font/freetypeScaler.c
===================================================================
--- jdk8u-tuxjdk.orig/jdk/src/share/native/sun/font/freetypeScaler.c
+++ jdk8u-tuxjdk/jdk/src/share/native/sun/font/freetypeScaler.c
@@ -38,6 +38,10 @@
 #include FT_SIZES_H
 #include FT_OUTLINE_H
 #include FT_SYNTHESIS_H
+#include FT_LCD_FILTER_H
+
+#include <fontconfig/fontconfig.h>
+#include <malloc.h>
 
 #include "fontscaler.h"
 
@@ -48,6 +52,14 @@
 #define  ROUND(x) ((int) (x+0.5))
 
 typedef struct {
+
+    FT_Render_Mode ftRenderMode;
+    int ftLoadFlags;
+    FT_LcdFilter ftLcdFilter;
+
+} RenderingProperties;
+
+typedef struct {
     /* Important note:
          JNI forbids sharing same env between different threads.
          We are safe, because pointer is overwritten every time we get into
@@ -80,8 +92,147 @@ typedef struct FTScalerContext {
     int        renderFlags;   /* configuration specific to particular engine */
     int        pathType;
     int        ptsz;          /* size in points */
+    RenderingProperties* renderingProperties;
 } FTScalerContext;
 
+static FcPattern* matchedPattern(const FcChar8* family, double ptSize) {
+    /*
+      we will create pattern to find our family and size in
+      fontconfig configuration, and then will return it's
+      properties:
+     */
+    FcPattern* fcPattern = 0;
+    fcPattern = FcPatternCreate();
+    FcValue fcValue;
+    fcValue.type = FcTypeString;
+    fcValue.u.s = family;
+    FcPatternAdd(fcPattern, FC_FAMILY, fcValue, FcTrue);
+    FcPatternAddBool(fcPattern, FC_SCALABLE, FcTrue);
+    FcPatternAddDouble(fcPattern, FC_SIZE, ptSize);
+    // TODO FcPatternAddInteger(pattern, FC_WEIGHT, weight_value);
+    // TODO FcPatternAddInteger(pattern, FC_SLANT, slant_value);
+    // TODO FcPatternAddDouble(pattern, FC_PIXEL_SIZE, size_value);
+    // TODO FcPatternAddInteger(pattern, FC_WIDTH, stretch); 100 in most cases
+    FcConfigSubstitute(0, fcPattern, FcMatchPattern);
+    FcConfigSubstitute(0, fcPattern, FcMatchFont);
+    FcDefaultSubstitute(fcPattern);
+    FcResult res;
+
+    FcPattern *pattern = 0;
+    pattern = FcFontMatch(0, fcPattern, &res);
+    FcPatternDestroy(fcPattern);
+    return pattern;
+}
+
+static void readFontconfig(const FcChar8* family, double ptSize, jint aaType, RenderingProperties* rp) {
+
+    //FcPattern *pattern = matchedPattern((const FcChar8 *) ftFace->family_name);
+    FcPattern *pattern = matchedPattern(family, ptSize);
+
+    int ftLoadFalgs = FT_LOAD_DEFAULT;
+    FT_Render_Mode ftRenderMode;
+    FT_LcdFilter ftLcdFilter;
+    char horizontal = 1;
+    FcBool b;
+
+    // subpixel order:
+    if (aaType == TEXT_AA_ON)
+        ftRenderMode = FT_RENDER_MODE_NORMAL;
+    else if (aaType == TEXT_AA_OFF)
+        ftRenderMode = FT_RENDER_MODE_MONO;
+    else if (FcPatternGetBool(pattern, FC_ANTIALIAS, 0, &b) == FcResultMatch)
+        if (b) {
+            int subpixel = FC_RGBA_UNKNOWN;
+            if (FcPatternGetInteger(pattern, FC_RGBA, 0, &subpixel) == FcResultMatch) {
+                if (subpixel == FC_RGBA_UNKNOWN)
+                    subpixel = FC_RGBA_NONE;
+                switch (subpixel) {
+                    case FC_RGBA_NONE:
+                        ftRenderMode = FT_RENDER_MODE_NORMAL;
+                        break;
+                    case FC_RGBA_RGB:
+                    case FC_RGBA_BGR:
+                        ftRenderMode = FT_RENDER_MODE_LCD;
+                        horizontal = 1;
+                        break;
+                    case FC_RGBA_VRGB:
+                    case FC_RGBA_VBGR:
+                        ftRenderMode = FT_RENDER_MODE_LCD_V;
+                        horizontal = 0;
+                        break;
+                    default:
+                        break;
+                }
+            }
+        } else {
+            ftRenderMode = FT_RENDER_MODE_NORMAL;
+        }
+
+    // loading mode:
+    if (aaType == TEXT_AA_OFF)
+        ftLoadFalgs |= FT_LOAD_TARGET_MONO;
+    else {
+        int hint_style = FC_HINT_NONE;
+        if (FcPatternGetInteger(pattern, FC_HINT_STYLE, 0, &hint_style) == FcResultMatch) {
+            switch (hint_style) {
+                case FC_HINT_NONE:
+                    ftLoadFalgs |= FT_LOAD_NO_HINTING;
+                    break;
+                case FC_HINT_SLIGHT:
+                    ftLoadFalgs |= FT_LOAD_TARGET_LIGHT;
+                    break;
+                case FC_HINT_MEDIUM:
+                    ftLoadFalgs |= FT_LOAD_TARGET_NORMAL;
+                    break;
+                case FC_HINT_FULL:
+                    if (aaType == TEXT_AA_ON)
+                        ftLoadFalgs |= FT_LOAD_TARGET_NORMAL;
+                    else
+                        ftLoadFalgs |= horizontal ? FT_LOAD_TARGET_LCD : FT_LOAD_TARGET_LCD_V;
+                    break;
+                default:
+                    // what else to use as default?
+                    ftLoadFalgs |= FT_LOAD_TARGET_NORMAL;
+                    break;
+            }
+        }
+    }
+
+    // autohinting:
+    if (FcPatternGetBool(pattern, FC_AUTOHINT, 0, &b) == FcResultMatch)
+        if (b)
+            ftLoadFalgs |= FT_LOAD_FORCE_AUTOHINT;
+
+    // LCD filter:
+    int filter = FC_LCD_DEFAULT;
+    if (FcPatternGetInteger(pattern, FC_LCD_FILTER, 0, &filter) == FcResultMatch) {
+        switch (filter) {
+            case FC_LCD_NONE:
+                ftLcdFilter = FT_LCD_FILTER_NONE;
+                break;
+            case FC_LCD_DEFAULT:
+                ftLcdFilter = FT_LCD_FILTER_DEFAULT;
+                break;
+            case FC_LCD_LIGHT:
+                ftLcdFilter = FT_LCD_FILTER_LIGHT;
+                break;
+            case FC_LCD_LEGACY:
+                ftLcdFilter = FT_LCD_FILTER_LEGACY;
+                break;
+            default:
+                // new unknown lcd filter type?! will use default one:
+                ftLcdFilter = FT_LCD_FILTER_DEFAULT;
+                break;
+        }
+    }
+
+    FcPatternDestroy(pattern);
+
+    rp->ftRenderMode = ftRenderMode;
+    rp->ftLoadFlags = ftLoadFalgs;
+    rp->ftLcdFilter = ftLcdFilter;
+}
+
 #ifdef DEBUG
 /* These are referenced in the freetype sources if DEBUG macro is defined.
    To simplify work with debuging version of freetype we define
@@ -395,6 +546,11 @@ static int setupFTContext(JNIEnv *env,
     scalerInfo->font2D = font2D;
 
     if (context != NULL) {
+
+        RenderingProperties* rp = (RenderingProperties*)calloc(1, sizeof(RenderingProperties));
+        context->renderingProperties = rp;
+        readFontconfig((const FcChar8 *) scalerInfo->face->family_name, context->ptsz, context->aaType, context->renderingProperties);
+
         FT_Set_Transform(scalerInfo->face, &context->transform, NULL);
 
         errCode = FT_Set_Char_Size(scalerInfo->face, 0, context->ptsz, 72, 72);
@@ -402,6 +558,9 @@ static int setupFTContext(JNIEnv *env,
         if (errCode == 0) {
             errCode = FT_Activate_Size(scalerInfo->face->size);
         }
+        
+        FT_Library_SetLcdFilter(scalerInfo->library, context->renderingProperties->ftLcdFilter);
+
     }
 
     return errCode;
@@ -687,12 +846,7 @@ Java_sun_font_FreetypeFontScaler_getGlyp
         JNIEnv *env, jobject scaler, jobject font2D,
         jlong pScalerContext, jlong pScaler, jint glyphCode) {
 
-    int error, imageSize;
-    UInt16 width, height;
-    GlyphInfo *glyphInfo;
-    int glyph_index;
-    int renderFlags = FT_LOAD_RENDER, target;
-    FT_GlyphSlot ftglyph;
+    int error;
 
     FTScalerContext* context =
         (FTScalerContext*) jlong_to_ptr(pScalerContext);
@@ -709,53 +863,45 @@ Java_sun_font_FreetypeFontScaler_getGlyp
         return ptr_to_jlong(getNullGlyphImage());
     }
 
-    /* if algorithmic styling is required then we do not request bitmap */
-    if (context->doBold || context->doItalize) {
-        renderFlags =  FT_LOAD_DEFAULT;
-    }
-
-    /* NB: in case of non identity transform
-     we might also prefer to disable transform before hinting,
-     and apply it explicitly after hinting is performed.
-     Or we can disable hinting. */
-
-    /* select appropriate hinting mode */
-    if (context->aaType == TEXT_AA_OFF) {
-        target = FT_LOAD_TARGET_MONO;
-    } else if (context->aaType == TEXT_AA_ON) {
-        target = FT_LOAD_TARGET_NORMAL;
-    } else if (context->aaType == TEXT_AA_LCD_HRGB ||
-               context->aaType == TEXT_AA_LCD_HBGR) {
-        target = FT_LOAD_TARGET_LCD;
-    } else {
-        target = FT_LOAD_TARGET_LCD_V;
-    }
-    renderFlags |= target;
-
-    glyph_index = FT_Get_Char_Index(scalerInfo->face, glyphCode);
+    /* TODO
+     * if algorithmic styling is required then we do not request bitmap
+     * if (context->doBold || context->doItalize) {
+     */
 
-    error = FT_Load_Glyph(scalerInfo->face, glyphCode, renderFlags);
+    //FT_UInt glyph_index = FT_Get_Char_Index(scalerInfo->face, glyphCode);
+    error = FT_Load_Glyph(scalerInfo->face, glyphCode, context->renderingProperties->ftLoadFlags);
     if (error) {
         //do not destroy scaler yet.
         //this can be problem of particular context (e.g. with bad transform)
         return ptr_to_jlong(getNullGlyphImage());
     }
 
-    ftglyph = scalerInfo->face->glyph;
+    FT_GlyphSlot ftglyph = scalerInfo->face->glyph;
+    error = FT_Render_Glyph(ftglyph, context->renderingProperties->ftRenderMode);
+    if (error) {
+        invalidateJavaScaler(env, scaler, scalerInfo);
+        return ptr_to_jlong(getNullGlyphImage());
+    }
 
-    /* apply styles */
-    if (context->doBold) { /* if bold style */
+    /* TODO
+    /* apply styles *
+    if (context->doBold) { /* if bold style *
         FT_GlyphSlot_Embolden(ftglyph);
     }
-    if (context->doItalize) { /* if oblique */
+    if (context->doItalize) { /* if oblique *
         FT_GlyphSlot_Oblique(ftglyph);
     }
 
     /* generate bitmap if it is not done yet
-     e.g. if algorithmic styling is performed and style was added to outline */
+     e.g. if algorithmic styling is performed and style was added to outline *
     if (ftglyph->format == FT_GLYPH_FORMAT_OUTLINE) {
         FT_Render_Glyph(ftglyph, FT_LOAD_TARGET_MODE(target));
     }
+     */
+
+    int imageSize;
+    UInt16 width, height;
+    GlyphInfo *glyphInfo;
 
     width  = (UInt16) ftglyph->bitmap.width;
     height = (UInt16) ftglyph->bitmap.rows;
